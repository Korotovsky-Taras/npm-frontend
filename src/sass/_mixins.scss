@mixin ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
}

@mixin linear_gradient($first_cl, $second_cl, $start: top, $end: bottom) {
    background: -moz-linear-gradient($start, $first_cl, $second_cl);
    @if $start == left or $start == right {
        background: -webkit-linear-gradient($start top, $first_cl, $second_cl);
    } @else {
        background: -webkit-linear-gradient(left $start, $first_cl, $second_cl);
    }
    background: linear-gradient(to $end, $first_cl 0%, $second_cl 100%);
}

@mixin clearfix() {
    &:before,
    &:after {
        content: " ";
        display: block;
        height: 0;
        visibility: hidden;
    }
    &:after {
        clear: both;
    }
}

@mixin placeholder {
    &::-webkit-input-placeholder {
        -webkit-font-smoothing: antialiased;
        @content;
    }
    &::-moz-placeholder {
        -moz-osx-font-smoothing: grayscale;
        @content;
    }
}

@function mergeListByIndex($arglist,$key) {
    $val: ();
    $map: keywords($arglist);
    @if inspect($map)=='()' and length($arglist) > 0 {
        @if type-of(nth($arglist,1))==map {
            $map: nth($arglist, 1);
        } @else {
            @each $item in $arglist {
                $list: if(type-of(nth($arglist,1))==list, $item, $arglist);
                $val: append($val, nth($list, $key), comma);
            }
        }
    }
    @return $val;
}

@mixin transition($transition...) {
    will-change: mergeListByIndex($transition, 1);
    transition: $transition;
}

@mixin box-shadow($shadow...) {
    box-shadow: $shadow;
}

@mixin box-sizing($value: border-box) {
    box-sizing: $value;
}

@mixin user-select-none() {
    user-select: none;
}

@mixin user-select-text() {
    user-select: text;
}

@mixin mq($point, $q1: min, $q2: width, $q3: null, $q3_point: "", $q3_size: max) {
    @if ($q3) {
        @media screen and (#{$q1}-#{$q2}: #{$point}), screen and (#{$q3_size}-#{$q3}: #{$q3_point}) {
            @content;
        }
    } @else {
        @media screen and (#{$q1}-#{$q2}: #{$point}) {
            @content;
        }
    }
}

@mixin antialiased() {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}


@mixin multiline($size: 12px, $line-height: 16px, $lines: 2) {
    display: block;
    display: -webkit-box;
    max-width: 100%;
    max-height: $line-height*$lines;
    font-size: $size;
    line-height: $line-height;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

@mixin in_b($pos: top){
    vertical-align: $pos;
    display: -moz-inline-stack;
    display: inline-block;
    *display: inline;
    zoom: 1;
}

@mixin col($col, $sum: $app-grid-max, $gap: $app-grid-indent, $align: top) {
  width: percentage($col/$sum);
  @include box-sizing;
  @if($gap != 0) {
    padding-left: $gap;
    padding-right: $gap;
  }
  float: left;
  @content;
}

@function indexUp($i) {
  @return ($i + 1);
}